<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Randomize seed (for choose function)
randomize();

//Create a list of rooms in a 1-dimensional array
roomList[0] = rm_Start
roomList[1] = rm_1_1
roomList[2] = rm_1_2
roomList[3] = rm_1_3

//Generate a 2-dimensional array of rooms
floorArray = scr_floorGenerate(roomList);

//Set current room coords
room_current_x = 32
room_current_y = 32

//Goto current room
room_goto(floorArray[room_current_x, room_current_y])
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exit room left
if obj_Player.x&lt;0
{
    room_goto(floorArray[room_current_x-1, room_current_y])
    room_current_x = room_current_x - 1
    obj_Player.x = room_width - sprite_width;
}
//Exit room right
if obj_Player.x&gt;room_width
{
    room_goto(floorArray[room_current_x+1, room_current_y])
    room_current_x = room_current_x + 1
    obj_Player.x = 0 + sprite_width;
}
//Exit room up
if obj_Player.y&lt;0
{
    room_goto(floorArray[room_current_x, room_current_y-1])
    room_current_y = room_current_y - 1
    obj_Player.y = room_height - sprite_height;
}
//Exit room down
if obj_Player.y&gt;room_height
{
    room_goto(floorArray[room_current_x, room_current_y+1])
    room_current_y = room_current_y + 1
    obj_Player.y = 0 + sprite_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if the cell left has a room
if( floorArray[room_current_x - 1, room_current_y] = -1 )
{
    instance_create( 32, room_height/2, obj_Wall)
} 
//Right
if( floorArray[room_current_x + 1, room_current_y] = -1 )
{
    instance_create( room_width - 32, room_height/2, obj_Wall)
}
//Up
if( floorArray[room_current_x, room_current_y - 1] = -1 )
{
    instance_create( room_width/2 + 32, 16, obj_Wall)
}
//Down
if( floorArray[room_current_x, room_current_y + 1] = -1 )
{
    instance_create( room_width/2 + 32, room_height - 16, obj_Wall)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_grid = ds_grid_create(16,12);

draw_set_colour(c_black);
for( i = 0; i &lt; 64; i++)
{
    for( j = 0; j &lt; 64; j++)
    {
        if(floorArray[i,j] != -1)
        draw_rectangle(i*16, j*12, i*16 + 16, j*12 + 12, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
